#!/usr/bin/env bash
#
# Some functions to modify public user-playlists via Spotify's Web API.
#
# Needs: bash, curl, and jq

# -- FUNCTIONS.

# -- web api.

function spotify::albums::getSeveralAlbums {
    # https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/

    [[ -n $2 ]] ||
        return 1

    command -- curl \
        -s \
        -X GET "https://api.spotify.com/v1/albums/?ids=${@:2}" \
        -H "Authorization: Bearer ${1:?}"
}

function spotify::playlist::addTracks {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/

    [[ -n $3 ]] ||
        return 1

    command -- curl \
        -s \
        -X POST "https://api.spotify.com/v1/playlists/${1:?}/tracks" \
        -H "Authorization: Bearer ${2:?}" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        --data "${@:3}"
}

function spotify::playlist::clear {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/

    command -- curl \
        -s \
        -X PUT "https://api.spotify.com/v1/playlists/${1:?}/tracks?uris=" \
        -H "Authorization: Bearer ${2:?}"
}

function spotify::playlist::create {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/

    command -- curl \
        -s \
        -X POST "https://api.spotify.com/v1/users/${1:?}/playlists" \
        -H "Authorization: Bearer ${3:?}" \
        -H "Content-Type: application/json" \
        --data "{\"name\":\"${2:?}\", \"public\":true, \"collaborative\":false}"
}

function spotify::get {
    command -- curl \
        -s \
        -H "Authorization: Bearer ${1:?}" \
        -X GET "${2:?}"
}

function spotify::playlist::getTracks {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/

    command -- curl \
        -s \
        -X GET "https://api.spotify.com/v1/playlists/${1:?}/tracks?limit=100&offset=${3:-0}" \
        -H "Authorization: Bearer ${2:?}"
}

function spotify::playlist::getTracksInMarket {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/

    command -- curl \
        -s \
        -X GET "https://api.spotify.com/v1/playlists/${1:?}/tracks?fields=next,items(track.is_playable,track.uri)&limit=100&offset=${3:-0}&market=${4:-DE}" \
        -H "Authorization: Bearer ${2:?}"
}

function spotify::playlist::list {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/

    command -- curl \
        -s \
        -X GET "https://api.spotify.com/v1/users/${1:?}/playlists?limit=50&offset=${3:-0}" \
        -H "Authorization: Bearer ${2:?}"
}

function spotify::playlist::privatize {
    # https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/

    command -- curl \
        -s \
        -X PUT "https://api.spotify.com/v1/playlists/${1:?}" \
        -H "Authorization: Bearer ${2:?}" \
        -H "Content-Type: application/json" \
        --data "{\"public\":false}"
}

function spotify::tracks::audio_features {
    # https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/

    [[ -n $2 ]] ||
        return 1

    command -- curl \
        -s \
        -X GET "https://api.spotify.com/v1/audio-features?ids=${@:2}" \
        -H "Accept: application/json" \
        -H "Authorization: Bearer ${1:?}"
}

# -- misc.

function addTracks {
    declare plid=${1:?} ato=${2:?}
    declare -a uris=()

    shift 3

    if [[ -p /dev/stdin || -f /dev/stdin ]]; then
        mapfile -t uris
    else
        (($#)) &&
            mapfile -t uris < <(exec -- cat -- "$@")
    fi

    ((${#uris[@]})) ||
        return 1

    declare -i \
        int=${#uris[@]}/100 \
        mod=${#uris[@]}%100 \
        i= \
        x=0 \
        y=100

    for ((i = int; i > 0; i--, x += 100)); do
        spotify::playlist::addTracks "$plid" "$ato" "$(
            printf %s\\n "${uris[@]:x:y}" |
                exec -- jq -R . |
                exec -- jq -sc '{ uris: . }'
        )"
    done

    ((mod)) &&
        spotify::playlist::addTracks "$plid" "$ato" "$(
            printf '%s\n' "${uris[@]: -mod}" |
                exec -- jq -R . |
                exec -- jq -sc '{ uris: . }'
        )"
}

function getLists {
    # TODO
    declare -i offset=-50

    exec -- jq -e -r --unbuffered '
        if (.items | length) > 0
        then .items[] | [.id, .name] | @sh "spotify_playlists+=(\(.))"
        else "exit"
        end
    ' < <(while spotify::playlist::list "${1:?}" "${2:?}" "$((offset += 50))"; do :; done) |
        command -- gawk '$0 == "exit" { exit }; { print $0; }'
}

function getAlbums {
    declare -i offset=-100
    declare \
        next \
        resp

    resp=$(spotify::playlist::getTracks "${1:?}" "${2:?}" "$((offset += 100))")

    until
        echo "$resp"
        next=$(exec -- jq -r .next <<<"$resp")
        [[ $next == null ]]
    do
        resp=$(spotify::get "$2" "$next")
    done |
        command -- jq -e -r '.items[] | [.track.album.uri, .track.uri] | @tsv'
}

function getAlbumsObjects {
    declare ato=${1:?}
    declare -a uris=()

    shift 1

    if [[ -p /dev/stdin || -f /dev/stdin ]]; then
        mapfile -t uris
    else
        (($#)) &&
            mapfile -t uris < <(exec -- cat -- "$@")
    fi

    ((${#uris[@]})) ||
        return 1

    declare -i \
        int=${#uris[@]}/20 \
        mod=${#uris[@]}%20 \
        i= \
        x=0 \
        y=20

    IFS=,
    for ((i = int; i > 0; i--, x += 20)); do
        spotify::albums::getSeveralAlbums "$ato" "${uris[*]:x:y}"
    done

    ((mod)) &&
        spotify::albums::getSeveralAlbums "$ato" "${uris[*]: -mod}"
}

function getTracks {
    declare -i offset=-100
    declare \
        next \
        resp

    resp=$(spotify::playlist::getTracks "${1:?}" "${2:?}" "$((offset += 100))")

    until
        echo "$resp"
        next=$(exec -- jq -r .next <<<"$resp")
        [[ $next == null ]]
    do
        resp=$(spotify::get "$2" "$next")
    done |
        command -- jq -e -r '.items[].track.uri'
}

function getTracksInMarket {
    declare -i offset=-100
    declare \
        next \
        resp

    resp=$(spotify::playlist::getTracksInMarket "${1:?}" "${2:?}" "$((offset += 100))" "$3")

    until
        echo "$resp"
        next=$(exec -- jq -r .next <<<"$resp")
        [[ $next == null ]]
    do
        resp=$(spotify::get "$2" "$next")
    done |
        command -- jq -e -r 'del(.next)'
}

function getTracksObjects {
    declare -i offset=-100
    declare \
        next \
        resp

    resp=$(spotify::playlist::getTracks "${1:?}" "${2:?}" "$((offset += 100))")

    until
        echo "$resp"
        next=$(exec -- jq -r .next <<<"$resp")
        [[ $next == null ]]
    do
        resp=$(spotify::get "$2" "$next")
    done |
        command -- jq -e -r '.'
}

function getTracksFeatures {
    declare ato=${1:?}
    declare -a uris=()

    shift 1

    if [[ -p /dev/stdin || -f /dev/stdin ]]; then
        mapfile -t uris
    else
        (($#)) &&
            mapfile -t uris < <(exec -- cat -- "$@")
    fi

    ((${#uris[@]})) ||
        return 1

    declare -i \
        int=${#uris[@]}/100 \
        mod=${#uris[@]}%100 \
        i= \
        x=0 \
        y=100

    IFS=,
    for ((i = int; i > 0; i--, x += 100)); do
        spotify::tracks::audio_features "$ato" "${uris[*]:x:y}"
    done

    ((mod)) &&
        spotify::tracks::audio_features "$ato" "${uris[*]: -mod}"
}

# -- MAIN.

case ${1:?} in
    addList)
        spotify::playlist::create "${@:2}"
        ;;
    addTracks | getLists | getAlbums | getAlbumsObjects | getTracks | getTracksInMarket | \
        getTracksObjects | getTracksFeatures)
        "$@"
        ;;
    clearList)
        spotify::playlist::clear "${@:2}"
        ;;
    privatizeList)
        spotify::playlist::privatize "${@:2}"
        ;;
    *)
        exit 1
        ;;
esac

# vim: set ft=zsh :
